import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Command
from datetime import datetime
from config.config import BOT_TOKEN
from modules.fsm_states import FeedbackStates
from modules.admin_commands import ban_user, unban_user, show_blacklist, toggle_maintenance, flush_queue, \
    SecurityMiddleware
from modules.init_google_sheets import save_to_google_sheets, temp_storage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="feedback_bot.log"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# ------------------------------------ –ö–Ω–æ–ø–∫–∏ ------------------------------------
def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = ReplyKeyboardBuilder()

    builder.button(text="üìù –ù–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–¥–±—ç–∫")
    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä —Ñ–∏–¥–±—ç–∫–æ–≤")

    builder.adjust(1)
    return builder.as_markup(
        resize_keyboard=True,
        input_field_placeholder="‚ñº –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚ñº"
    )


@dp.message(FeedbackStates.MAIN_MENU, F.text == "üìù –ù–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫")
async def new_feedback(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –§–ò–û –¥–µ–ª–µ–≥–∞—Ç–∞):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(FeedbackStates.COMPANY_INPUT)


@dp.message(FeedbackStates.MAIN_MENU, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–¥–±—ç–∫")
async def edit_feedback_start(message: types.Message, state: FSMContext):

    if not temp_storage.get(message.from_user.id):
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–¥–±–µ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    feedbacks_list = "\n".join(
        f"{i + 1}. {fb['company_info']} - {fb['feedback_text'][:30]}..."
        for i, fb in enumerate(temp_storage[message.from_user.id]))

    builder = ReplyKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥")

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–¥–±—ç–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n{feedbacks_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–¥–±–µ–∫–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

    await state.set_state(FeedbackStates.EDIT_FEEDBACK)

    @dp.message(FeedbackStates.EDIT_FEEDBACK)
    async def edit_feedback_select(message: types.Message, state: FSMContext):
        try:
            feedback_num = int(message.text)
            if 1 <= feedback_num <= len(temp_storage[message.from_user.id]):
                feedback = temp_storage[message.from_user.id][feedback_num - 1]
                await state.update_data(
                    edit_feedback_num=feedback_num - 1,
                    current_feedback_text=feedback["feedback_text"]
                )

                await message.answer(
                    f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ñ–∏–¥–±–µ–∫–∞:\n{feedback['feedback_text']}\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
                    reply_markup=ReplyKeyboardRemove()
                )
                await state.set_state(FeedbackStates.EDIT_FEEDBACK_TEXT)
            else:
                await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–¥–±–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    @dp.message(FeedbackStates.EDIT_FEEDBACK_TEXT)
    async def edit_feedback_text(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        feedback_num = user_data["edit_feedback_num"]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        temp_storage[message.from_user.id][feedback_num]["feedback_text"] = message.text
        temp_storage[message.from_user.id][feedback_num]["timestamp"] = str(datetime.now())

        await message.answer(
            "‚úÖ –§–∏–¥–±—ç–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.set_state(FeedbackStates.MAIN_MENU)


@dp.message(FeedbackStates.MAIN_MENU, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä —Ñ–∏–¥–±—ç–∫–æ–≤")
async def finish_feedback(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–î–∞")
    builder.button(text="–ù–µ—Ç")

    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä —Ñ–∏–¥–±—ç–∫–æ–≤? "
        f"(–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∏–¥–±—ç–∫–æ–≤: {len(temp_storage.get(message.from_user.id, []))})",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(FeedbackStates.CONFIRMATION)


@dp.message(FeedbackStates.CONFIRMATION, F.text == "–î–∞")
async def confirm_finish(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in temp_storage and temp_storage[user_id]:
        success = await save_to_google_sheets(temp_storage[user_id])
        if success:
            await message.answer(
                f"‚úÖ –í—Å–µ {len(temp_storage[user_id])} —Ñ–∏–¥–±—ç–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
            temp_storage[user_id] = []  # –û—á–∏—â–∞–µ–º —Ñ–∏–¥–±–µ–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ø–∞–º—è—Ç–∏.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard()
            )
    else:
        await message.answer(
            "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_menu_keyboard()
        )

    await state.set_state(FeedbackStates.MAIN_MENU)


@dp.message(FeedbackStates.CONFIRMATION, F.text == "–ù–µ—Ç")
async def cancel_finish(message: types.Message, state: FSMContext):
    await message.answer(
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä —Ñ–∏–¥–±—ç–∫–æ–≤. (–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏: {len(temp_storage.get(message.from_user.id, []))})",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(FeedbackStates.MAIN_MENU)


@dp.message(FeedbackStates.EDIT_FEEDBACK, F.text == "–ù–∞–∑–∞–¥")
async def edit_feedback_back(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(FeedbackStates.MAIN_MENU)


# ------------------------------------ –°—Ç–∞—Ä—Ç ------------------------------------
@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    temp_storage.pop(message.from_user.id, None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∏–¥–±—ç–∫–æ–≤!\n\n"
        "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ù–æ–≤—ã–π —Ñ–∏–¥–±—ç–∫' –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ñ–∏–¥–±—ç–∫\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
        "‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞:\n"
        "- –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?\n"
        "- –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?\n"
        "- –í–∞—à–∏ –æ–±—â–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è"
    )

    await message.answer(welcome_text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(FeedbackStates.AUTHENTICATION)


@dp.message(FeedbackStates.AUTHENTICATION)
async def process_authentication(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        return

    await state.update_data(lpm_name=message.text)
    temp_storage[message.from_user.id] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(FeedbackStates.MAIN_MENU)


# ------------------------------------ –ò–Ω–ø—É—Ç—ã ------------------------------------
@dp.message(FeedbackStates.COMPANY_INPUT)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company_info=message.text)
    await message.answer("–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ñ–∏–¥–±—ç–∫:")
    await state.set_state(FeedbackStates.FEEDBACK_INPUT)


@dp.message(FeedbackStates.FEEDBACK_INPUT)
async def process_feedback(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–¥–±–µ–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    feedback_data = {
        "lpm_name": user_data.get("lpm_name", ""),
        "company_info": user_data.get("company_info", ""),
        "feedback_text": message.text,
        "timestamp": str(datetime.now()),
        "user_name": message.from_user.full_name,
        "user_id": message.from_user.id
    }

    temp_storage[message.from_user.id].append(feedback_data)

    await message.answer(
        f"‚úÖ –§–∏–¥–±—ç–∫ ‚Ññ{len(temp_storage[message.from_user.id])} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(FeedbackStates.MAIN_MENU)


async def main():
    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(ban_user, Command("ban"))
    dp.message.register(unban_user, Command("unban"))
    dp.message.register(show_blacklist, Command("blacklist"))
    dp.message.register(toggle_maintenance, Command("maintenance"))
    dp.message.register(flush_queue, Command("flush_queue"))

    # –ó–∞—Ç–µ–º middleware
    dp.message.middleware(SecurityMiddleware())

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç @{bot_info.username} –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
